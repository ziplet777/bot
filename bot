# coding=utf-8
import logging

from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.types import ContentType
from aiogram.utils import executor

API_TOKEN = '5001553397:AAGgAc_nZ32iPZY9bk7-U7Xq4gW9NvfQl5I'  # —Ç–æ–∫–µ–Ω
ADMIN_CHAT_ID = -1001827352727  # ID —á–∞—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤

adverts = {}

# Configure logging
logging.basicConfig(level=logging.DEBUG)

# Initialize bot and dispatcher
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())
dp.middleware.setup(LoggingMiddleware())

start_keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
start_keyboard.add('üëâ–°—Ç–∞—Ä—Ç')

anonim_keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
anonim_keyboard.add('üë§–ê–Ω–æ–Ω–∏–º')

confirmation_keyboard = types.InlineKeyboardMarkup()
confirmation_keyboard.add(types.InlineKeyboardButton('üì©–û—Ç–ø—Ä–∞–≤–∏—Ç—å', callback_data='send'))
confirmation_keyboard.add(types.InlineKeyboardButton('üö´–û—Ç–º–µ–Ω–∏—Ç—å', callback_data='cancel'))

categories_keyboard = types.ReplyKeyboardMarkup(one_time_keyboard=True)
categories = ['üí∞–ù–µ—Å–∞–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è', 'üèó–ù–µ—Å–∞–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ', 'üö¶–î–æ—Ä–æ–≥–∏, —è–º—ã –∏ –¥–æ—Ä–æ–∂–Ω—ã–µ –∑–Ω–∞–∫–∏',
              'üîå–≠–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–æ/–≥–∞–∑', 'üí°–û—Å–≤–µ—â–µ–Ω–∏–µ', 'üóë–£–±–æ—Ä–∫–∞ –º—É—Å–æ—Ä–∞', 'üêï–ë—Ä–æ–¥—è—á–∏–µ —Å–æ–±–∞–∫–∏']
for item in categories:
    categories_keyboard.add(item)


class Form(StatesGroup):
    category = State()
    street = State()
    problem = State()
    photo = State()
    author = State()


@dp.message_handler(commands=['chat_id'], state='*')
async def get_chat_id(message: types.Message):
    await message.answer(str(message.chat.id))


@dp.message_handler(commands=['start'], state='*')
async def process_start_command(message: types.Message):
    await message.answer('''–ß—Ç–æ –º–æ–∂–µ—Ç –¥–µ–ª–∞—Ç—å —ç—Ç–æ—Ç –±–æ—Ç?

–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ø—Ä–æ–±–ª–µ–º–∞—Ö —Å–µ–ª–∞. –° –ø–æ–º–æ—â—å—é –±–æ—Ç–∞, –∂–∏—Ç–µ–ª–∏ –º–æ–≥—É—Ç –±—ã—Å—Ç—Ä–æ —É–≤–µ–¥–æ–º–∏—Ç—å –º—ç—Ä–∏—é –æ –ø—Ä–æ–±–ª–µ–º–∞—Ö –≤ —Å–µ–ª–µ. –ß—Ç–æ–±—ã —Å–æ–æ–±—â–∏—Ç—å –æ –ø—Ä–æ–±–ª–µ–º–µ –Ω–∞–∂–º–∏—Ç–µ /start''', reply_markup=start_keyboard)


@dp.message_handler(lambda message: message.text and '—Å—Ç–∞—Ä—Ç' in message.text.lower(), state='*')
async def category_q(message: types.Message):
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é', reply_markup=categories_keyboard)
    await Form.category.set()


@dp.message_handler(state=Form.category)
async def category_handler(message: types.Message):
    await message.answer('–í–≤–µ–¥–∏—Ç–µ —É–ª–∏—Ü—É', reply_markup=types.ReplyKeyboardRemove())
    adverts[message.from_user.id] = {'category': message.text}
    await Form.street.set()


@dp.message_handler(state=Form.street)
async def category_handler(message: types.Message):
    adverts[message.from_user.id]['street'] = message.text
    await message.answer('–û–ø–∏—à–∏—Ç–µ –≤–∫—Ä–∞—Ç—Ü–µ –ø—Ä–æ–±–ª–µ–º—É', reply_markup=types.ReplyKeyboardRemove())
    await Form.problem.set()


@dp.message_handler(state=Form.problem)
async def category_handler(message: types.Message):
    adverts[message.from_user.id]['problem'] = message.text
    await message.answer('–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ', reply_markup=types.ReplyKeyboardRemove())
    await Form.photo.set()


@dp.message_handler(content_types=[ContentType.PHOTO], state=Form.photo)
async def photo_input(message: types.Message):
    adverts[message.from_user.id]['photo'] = [message.photo[-1].file_id]
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –í–∞—à–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é', reply_markup=anonim_keyboard)
    await Form.author.set()


@dp.message_handler(state=Form.author)
async def author_name(message: types.Message):
    adverts[message.from_user.id]['author'] = message.text
    await message.answer('„Ö§', reply_markup=types.ReplyKeyboardRemove())
    await message.answer_photo(adverts[message.from_user.id]["photo"][0],
                               f'''–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {adverts[message.from_user.id]["category"]}
–£–ª–∏—Ü–∞: {adverts[message.from_user.id]["street"]}
–ü—Ä–æ–±–ª–µ–º–∞: {adverts[message.from_user.id]["problem"]}
–ê–≤—Ç–æ—Ä: {adverts[message.from_user.id]["author"]}''', reply_markup=confirmation_keyboard)
    await Form.photo.set()


@dp.callback_query_handler(state='*', text='send')
async def send(call: types.CallbackQuery):
    await call.answer('–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ. –ù–∞–ø–∏—à–∏—Ç–µ /start, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ', show_alert=True)
    await call.message.edit_reply_markup()
    await bot.send_photo(ADMIN_CHAT_ID, adverts[call.from_user.id]["photo"][0],
                           f'''–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {adverts[call.from_user.id]["category"]}
–£–ª–∏—Ü–∞: {adverts[call.from_user.id]["street"]}
–ü—Ä–æ–±–ª–µ–º–∞: {adverts[call.from_user.id]["problem"]}
–ê–≤—Ç–æ—Ä: {adverts[call.from_user.id]["author"]}''')


@dp.callback_query_handler(state='*', text='cancel')
async def cancel(call: types.CallbackQuery):
    await call.answer('–û—Ç–º–µ–Ω–µ–Ω–æ. –ù–∞–ø–∏—à–∏—Ç–µ /start, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ', show_alert=True)
    await call.message.edit_reply_markup()



def main():
    try:
        executor.start_polling(dp, skip_updates=True)
    except Exception:
        main()


if __name__ == '__main__':
    main()
